. ~/.config/.github/.login # ·c·

update_login(){ # ·c·
  echo ...................................................
  echo Please create a GitHub API Token in your GitHub Account
  echo AND give repo and delete_repo 
  echo permissions to this token
  echo in  -- https://github.com/settings/tokens --
  echo ...................................................
  read -p "Please enter your GitHub USERNAME =  " username
  read -p "Please enter your GitHub TOKEN =  " token
  echo ...................................................
  if [ "$username" = "" ]; then
    return 1
  fi
  if [ "$token" = "" ]; then
    return 1
  fi
  if ! [ "$username" = "" ]; then
    if ! [ "$token" = "" ]; then
      echo "GITHUB_USERNAME='$username'
GITHUB_TOKEN='$token'" >  ~/.config/.github/.login # ·c·
      echo ................................................... # ·c·
      cat ~/.config/.github/.login # ·c·
      echo ................................................... # ·c·
    fi # ·c·
  fi # ·c·
} # ·c·
show_ssh(){ # ·c·
    if [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
      echo "{ RSA } SSH KEY" # ·c·
        cat ~/.ssh/id_rsa.pub # ·c·
      echo "{ RSA } SSH KEY" # ·c·
    fi # ·c·
    if [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
      echo "{ ED25519 } SSH KEY" # ·c·
        cat ~/.ssh/id_ed25519.pub # ·c·
      echo "{ ED25519 } SSH KEY" # ·c·
    fi # ·c·
} # ·c·

alias ".gh.ssh"="show_ssh" # ·a·
alias ".gh.token"="cat ~/.config/.github/.login" # ·a·
alias ".gh.token.setup"="update_login" # ·a·

# Add SSH -RSA- -ED- KEY to your GitHub Account # ·e· 
add_ssh_github(){ # ·c·
  # Check if the repository name is provided as an argument # ·e·
if [ $# -ne 1 ]; then # ·c·
  return 1 # ·c·
fi # ·c·

if ! [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
  if ! [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
    read -p "-NO SSH KEY - FOUND. Which cert you want? type { rsa } for RSA SHH Key -or- { ed } for ED25519 SSH Key = " key  # ·c·
    if [ "$key" = "rsa" ]; then # ·c·
      ssh-keygen -t rsa -b 2048 # ·c·
    fi # ·c·
    if [ "$key" = "ed" ]; then # ·c·
      ssh-keygen -t ed25519 # ·c·
    fi # ·c·
  fi # ·c·
fi # ·c·

if [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
  ssh_key=$(cat ~/.ssh/id_rsa.pub) # ·c·
elif [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
    ssh_key=$(cat ~/.ssh/id_ed25519.pub) # ·c·
fi # ·c·
# SSH-Schlüssel der cURL-Anfrage übergeben und die API aufrufen # ·e·
curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d '{"title":"'"$1"'", "key":"'"$ssh_key"'"}' "https://api.github.com/user/keys" # ·c·
} # ·c·
alias ".gh.ssh.create"="add_ssh_github" # ·a·


# Define the function to delete a GitHub repository # ·e·
repo_delete() { # ·c·
  # Check if the repository name is provided as an argument # ·e·
  if [ $# -ne 1 ]; then # ·c·
    return 1 # ·c·
  fi # ·c·

  local repo_name="$1" # ·c·
  sudo rm -r ~/Documents/$1 # ·c·
  curl -X DELETE -u "$GITHUB_USERNAME:$GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_USERNAME/$repo_name" # ·c·
}

alias ".gh.repo.delete"="repo_delete" # ·a·

# Define the function # ·e·
# to initialize a new Git repository, # ·e· 
# create a branch, # ·e·
# make the first commit, # ·e· 
# add remote, and # ·e·
# push to the remote # ·e·
git_setup_and_push() { # ·c·
  # Check if the repository name is provided as an argument # ·e·
  if [ $# -ne 1 ]; then # ·c·
    echo "Usage: git_setup_and_push <repository_name>" # ·c·
    return 1 # ·c·
  fi # ·c·
  cd ~/Documents/ # ·c·
  cd ~/Dokumente/ # ·c·
  local repo_name="$1" # ·c·
  local api_url="https://api.github.com/user/repos" # ·c·
  # JSON-Payload for the repository creation request # ·e·
  local payload='{ # ·c·
    "name": "'$repo_name'", # ·c·
    "private": false, # ·c·
    "auto_init": true # ·c·
  }' # ·c·
  # Create the new GitHub repository # ·e·
  local response=$(curl -X POST \  # ·c·
    -H "Authorization: token $GITHUB_TOKEN" \ # ·c·
    -H "Accept: application/vnd.github.v3+json" \ # ·c·
    -d "$payload" \ # ·c·
    "$api_url") # ·c·
    echo https://"$GITHUB_TOKEN"@github.com/$GITHUB_USERNAME/$1.git # ·c·
    git clone https://"$GITHUB_TOKEN"@github.com/$GITHUB_USERNAME/$1.git # ·c·
    cd "$1" # ·c·
    rm README.md # ·c·

input_string="$1" # ·c·
uc_string=$(echo "$input_string" | tr '[:lower:]' '[:upper:]') # ·c·
current_year=$(date +%Y) # ·c·

# Schreiben des Inhalts in die README.md-Datei # ·e·
cat > README.md << EOF # ·c·
---
#
# $(echo "$uc_string" | tr -d '\n' | sed 's/./ & /g')
# 
---
EOF # ·c·
cat >> README.md << EOF # ·c·
> __Content__:
  - For evolving workflow speed.
    - ...
    - ...
    - ...
---
## Features

> __Functions__
  - ...
  - ...
  - ...
---
EOF # ·c·


cat >> README.md << EOF # ·c·
## Installation

> For the first __Installation:__

- ___Linux__ & __macOS___:
  - run in the __Terminal__:
  - ...
  - ...
  - ...
---
## Usage

> __type commands__
  - ...
  - ...
  - ...
---
## Licence

> M I T
---
## Contributors & Authors
> Author: ${GITHUB_USERNAME} © ${current_year}
---
EOF # ·c·
    # Add the README.md to the staging area # ·e·
    git add README.md # ·c·

    # Make the initial commit with the repository name as the commit message # ·e·
    git commit -m "The Project begins" # ·c·
    git push # ·c·
    # Display the Git status at the end # ·e·
    git status # ·c·
    cd .. && c # ·c·
    code ./$1/ # ·c·
    code ./$1/README.md # ·c·
}
alias ".gh.repo.create"="git_setup_and_push" # ·a·

info(){ # ·c·
echo .
echo '·________________________________·'|grep -E "_"  # ·c·
echo '| ..... Check your SSH Keys .... |'|grep -E "\|" # ·c·
echo '| .....      .gh.ssh        .... |'|grep -E "\|" # ·c·
echo '·________________________________·'|grep -E "·"  # ·c·
echo .
echo '·________________________________·'|grep -E "_"  # ·c·
echo '| ..   Check GitHub API Token .. |'|grep -E "\|" # ·c·
echo '| .....      .gh.token      .... |'|grep -E "\|" # ·c·
echo '·________________________________·'|grep -E "·"  # ·c· 
echo .
echo '·________________________________·'|grep -E "_"  # ·c·
echo '| .....   API Token Setup   .... |'|grep -E "\|" # ·c·
echo '| .....   .gh.token.setup   .... |'|grep -E "\|" # ·c·
echo '·________________________________·'|grep -E "·"  # ·c· 
echo .
echo 'Usage: .gh.ssh.create <ssh_title> to create or add SSH Key to GitHub'| grep -E "<|>|\.|:"
echo '·________________________________·'|grep -E "_"  # ·c·
echo '|Add SSH KEY to GitHub via Token |'|grep -E "\|" # ·c·
echo '| .....   .gh.ssh.create    .... |'|grep -E "\|" # ·c·
echo '·________________________________·'|grep -E "·"  # ·c· 
echo .
echo 'Usage: .gh.repo.delete <repository_name> to delete GitHub repo'| grep -E "<|>|\.|:"
echo '·________________________________·'|grep -E "_"  # ·c·
echo '|  GitHub Repo Delete via Token  |'|grep -E "\|" # ·c·
echo '| .....  .gh.repo.delete    .... |'|grep -E "\|" # ·c·
echo '·________________________________·'|grep -E "·"  # ·c· 
echo .
echo 'Usage: .gh.repo.create <repository_name> to create GitHub repo'| grep -E "<|>|\.|:"
echo '·________________________________·'|grep -E "_"  # ·c·
echo '|  GitHub Repo Create via Token  |'|grep -E "\|" # ·c·
echo '| .....  .gh.repo.create    .... |'|grep -E "\|" # ·c·
echo '·________________________________·'|grep -E "·"  # ·c· 
echo .
} # ·c·
alias ".gh.info"="info" # ·a·