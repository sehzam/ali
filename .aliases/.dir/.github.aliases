# Edit the ~/.config/.github/.login file and
# (IF NOT EXIST = create it yourself) 
# replace your username and API token 
# for work correctly
# i.e.
# GITHUB_USERNAME="...username..."
# GITHUB_TOKEN="...token..."
# or run alias
# ( .gh.login )
source ~/.config/.github/.login
alias ".r"="sudo rm -r"
copy_create_folder() {
  local destination="$1"
  echo "$1"
  echo "$2"
  echo "$3"
  shift # The first argument ($1) is shifted, so $2 becomes $1, $3 becomes $2, and so on.

  mkdir -p "$destination"
  cp -r "$@" "$destination"
}

# Die Zeile shift wird verwendet, 
# um das erste Argument ($1) zu entfernen und 
# die Position aller weiteren Argumente 
# um eine Position zu verschieben. 
# Dadurch wird $2 zu $1, $3 zu $2 und so weiter.

alias '.ccf'='copy_create_folder'

update_login(){
  echo ...................................................
  echo Please create a GitHub API Token in your GitHub Account
  echo AND give repo and delete_repo 
  echo permissions to this token
  echo in  -- https://github.com/settings/tokens --
  echo ...................................................
  read -p "Please enter your GitHub USERNAME =  " username
  read -p "Please enter your GitHub TOKEN =  " token
  echo ...................................................
  if [ "$username" = "" ]; then
    return 1
  fi
  if [ "$token" = "" ]; then
    return 1
  fi
  if ! [ "$username" = "" ]; then
    if ! [ "$token" = "" ]; then
      echo "GITHUB_USERNAME='$username'
GITHUB_TOKEN='$token'" >  ~/.config/.github/.login
      echo ...................................................
      echo ~/.config/.github/.login
      cat ~/.config/.github/.login
      echo ...................................................
    fi
  fi
}

alias ".gh.login"="update_login"
echo ·_____________________________________________________________________________· |grep -E "_"  # ·f·
echo "Usage:( .gh.login ) asks and saves GitHub USERNAME and API TOKEN"| grep -E "<|>|\.|:"



# Add SSH -RSA- -ED- KEY to your GitHub Account 
add_ssh_github(){
  # Check if the repository name is provided as an argument
if [ $# -ne 1 ]; then
  return 1
fi

if ! [ -f ~/.ssh/id_rsa.pub ]; then
  if ! [ -f ~/.ssh/id_ed25519.pub ]; then
    read -p "-NO SSH KEY - FOUND. Which cert you want? type { rsa } for RSA SHH Key -or- { ed } for ED25519 SSH Key = " key
    if [ "$key" = "rsa" ]; then
      ssh-keygen -t rsa -b 2048
    fi
    if [ "$key" = "ed" ]; then
      ssh-keygen -t ed25519
    fi
  fi
fi

if [ -f ~/.ssh/id_rsa.pub ]; then
  ssh_key=$(cat ~/.ssh/id_rsa.pub)
elif [ -f ~/.ssh/id_ed25519.pub ]; then
    ssh_key=$(cat ~/.ssh/id_ed25519.pub)
fi
# SSH-Schlüssel der cURL-Anfrage übergeben und die API aufrufen
curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d '{"title":"'"$1"'", "key":"'"$ssh_key"'"}' "https://api.github.com/user/keys"
}
alias ".gh.key"="add_ssh_github"
echo "Usage:( .gh.key ) <ssh_title>" to create or add SSH Key to GitHub| grep -E "<|>|\.|:"



# Define the function to delete a GitHub repository
repo_delete() {
  # Check if the repository name is provided as an argument
  if [ $# -ne 1 ]; then
    return 1
  fi

  local repo_name="$1"
  sudo rm -r ~/Documents/$1
  curl -X DELETE -u "$GITHUB_USERNAME:$GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_USERNAME/$repo_name"
}

alias ".gh.delete"="repo_delete"
echo "Usage:( .gh.delete ) <repository_name>" to delete GitHub repo| grep -E "<|>|\.|:"

# Define the function 
# to initialize a new Git repository, 
# create a branch, 
# make the first commit, 
# add remote, and 
# push to the remote
git_setup_and_push() {
  # Check if the repository name is provided as an argument
  if [ $# -ne 1 ]; then
    echo "Usage: git_setup_and_push <repository_name>"
    return 1
  fi
  cd ~/Documents/
  cd ~/Dokumente/
  local repo_name="$1"
  local api_url="https://api.github.com/user/repos"
  # JSON-Payload for the repository creation request
  local payload='{
    "name": "'$repo_name'",
    "private": false,
    "auto_init": true
  }'
  # Create the new GitHub repository
  local response=$(curl -X POST \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -d "$payload" \
    "$api_url")
    echo https://"$GITHUB_TOKEN"@github.com/$GITHUB_USERNAME/$1.git
    git clone https://"$GITHUB_TOKEN"@github.com/$GITHUB_USERNAME/$1.git
    cd "$1"
    rm README.md

input_string="$1"
uc_string=$(echo "$input_string" | tr '[:lower:]' '[:upper:]')
current_year=$(date +%Y)

# Schreiben des Inhalts in die README.md-Datei
cat > README.md << EOF
---
#
# $(echo "$uc_string" | tr -d '\n' | sed 's/./ & /g')
# 
---
EOF
cat >> README.md << EOF
> __Content__:
  - For evolving workflow speed.
    - ...
    - ...
    - ...
---
## Features

> __Functions__
  - ...
  - ...
  - ...
---
EOF


cat >> README.md << EOF
## Installation

> For the first __Installation:__

- ___Linux__ & __macOS___:
  - run in the __Terminal__:
  - ...
  - ...
  - ...
---
## Usage

> __type commands__
  - ...
  - ...
  - ...
---
## Licence

> M I T
---
## Contributors & Authors
> Author: ${GITHUB_USERNAME} © ${current_year}
---
EOF
    # Add the README.md to the staging area
    git add README.md

    # Make the initial commit with the repository name as the commit message
    git commit -m "The Project begins"

    git push

    # Display the Git status at the end
    git status

    cd .. && c
    code ./$1/
    code ./$1/README.md
  

}

alias ".gh.setup"="git_setup_and_push"
echo "Usage:( .gh.setup ) <repository_name>" to create GitHub repo| grep -E "<|>|\.|:"
echo "with $ GITHUB_USERNAME" and $ GITHUB_TOKEN| grep -E "<|>|\.|:"
echo "in ~/.config/.github/.login"| grep -E "<|>|\.|:"
echo ·_____________________________________________________________________________· |grep -E "_"  # ·f·