# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Function ------------------ ·f·  Function
# ·f· ______________________________________________ ·f· 

############################################################################

setup(){

  local function=$1

  if [ -f ~/.config/.github/.login ]; then

    if [[ "$GITHUB_TOKEN" == "" ]] || [[ "$GITHUB_USERNAME" == "" ]]; then
      echo "#######################################"
      echo "NOT DEFINED: GitHub API Token"
      echo "#######################################"
      update_login
    fi

      ######################################
      shift 1 # skip the first parameter ( skip setup() )
      $function "$@" # run the function with all parameter
      ######################################

  elif ! [ -f ~/.config/.github/.login ]; then
      echo "#######################################"
      echo "NO FILE: GitHub API Token"
      echo "#######################################"
      update_login
  fi

}

############################################################################

token(){
    cat ~/.config/.github/.login
}

############################################################################

token_setup() {
  setup token
}
add_ssh_github_setup() {
  setup add_ssh_github "$@"
}
delete_repo_setup() {
  setup delete_repo "$@"
}
list_repo_setup() {
  setup list_repo "$@"
}
git_setup_and_push_setup() {
  setup git_setup_and_push "$@"
}
add_collaborator_setup() {
  setup add_collaborator "$@"
}
delete_collaborator_setup() {
  setup delete_collaborator "$@"
}
list_collaborator_setup() {
  setup list_collaborator "$@"
}
list_repo_with_collaborator_setup() {
  setup list_repo_with_collaborator "$@"
}

############################################################################

update_login(){ # ·c·
  echo "######################################" # ·c·
  echo "Please create a GitHub API Token in your GitHub Account" # ·c·
  echo "AND give repo and delete_repo"  # ·c·
  echo "permissions to this token"
  echo "-- https://github.com/settings/tokens --" # ·c·
  echo "######################################" # ·c·
  read -p "Please enter your GitHub USERNAME =  " username # ·c·
  read -p "Please enter your GitHub TOKEN =  " token  # ·c·
  echo "######################################" # ·c·
  if [ "$username" = "" ]; then # ·c·
    return 1 # ·c·
  fi # ·c·
  if [ "$token" = "" ]; then # ·c·
    return 1 # ·c·
  fi # ·c·
  if ! [ "$username" = "" ]; then # ·c·
    if ! [ "$token" = "" ]; then # ·c·
      if ! [ -d ~/.config/.github/ ]; then
        mkdir -p ~/.config/.github/
      fi
      echo "GITHUB_USERNAME='$username'" >  ~/.config/.github/.login # ·c·
      echo "GITHUB_TOKEN='$token'" >>  ~/.config/.github/.login # ·c·
      echo "######################################" # ·c·
      cat ~/.config/.github/.login # ·c·
      echo "######################################" # ·c·
    fi # ·c·
  fi # ·c·
} # ·c·

############################################################################
create_ssh(){
  echo "#######################################"
    echo "ERROR: no SSH keys found"
    echo "#######################################"
      read -p "Which SSH KEY you want to create?
( ED/ed for ed25519 ) :
( RSA/rsa for rsa )   :" ssh
    echo "#######################################"
    # Process the user's answer
    case "$ssh" in      
      [Rr][Ss][Aa])
        ssh-keygen -t rsa -b 2048 # ·c·
        ;;
      [Ee][Dd])
        ssh-keygen -t ed25519 # ·c·
        ;;
      *)
        echo "Invalid input. SSH KEY - creation aborted."
        ;;
    esac
}
############################################################################
############################################################################

show_ssh(){ # ·c·
    echo "#######################################"
    echo "SSH Keys: installed in ~/.ssh/"
    echo "#######################################"
  if [ -f ~/.ssh/id_rsa ] || [ -f ~/.ssh/id_ed25519 ]; then

    if [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
      echo "{ RSA } SSH KEY" # ·c·
        cat ~/.ssh/id_rsa.pub # ·c·
      echo "{ RSA } SSH KEY" # ·c·
    fi # ·c·
    if [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
      echo "{ ED25519 } SSH KEY" # ·c·
        cat ~/.ssh/id_ed25519.pub # ·c·
      echo "{ ED25519 } SSH KEY" # ·c·
    fi # ·c·

  else
    create_ssh
  fi
} # ·c·

############################################################################

# Add SSH -RSA- -ED- KEY to your GitHub Account # ·e· 
add_ssh_github(){ # ·c·
  # Check if the repository name is provided as an argument # ·e·
  if [ $# -ne 1 ]; then # ·c·
    return 1 # ·c·
  fi # ·c·

  if ! [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
    if ! [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
      create_ssh
    fi # ·c·
  fi # ·c·

  if [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
      ssh_key=$(cat ~/.ssh/id_ed25519.pub) # ·c·
  elif [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
    ssh_key=$(cat ~/.ssh/id_rsa.pub) # ·c·

  fi # ·c·
  # Emit SSH key to curl and call the API # ·e·
  curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d '{"title":"'"$1"'", "key":"'"$ssh_key"'"}' "https://api.github.com/user/keys" # ·c·
} # ·c·
    
############################################################################

# Define the function to delete a GitHub repository
delete_repo() {

  # Check if the repository name is provided as an argument
  if [ $# -ne 1 ]; then
    echo "Usage: repo_delete <repository_name>"
    return 1
  fi
  
  load_repos

  public_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=public" | jq -r '.[].name')
  private_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=private" | jq -r '.[].name')

  fn=$(echo $(echo "$public_repos"|grep -E "$1"))
  fn_private=$(echo $(echo "$private_repos"|grep -E "$1"))
  local repo_name="$1"
  local repo_path=$(grep -E "^$repo_name = " ~/.config/.github/.repo | grep -oP "(?<=$repo_name = ).*")

  # Check if the repository exists
  if ! echo "$fn_private" | grep -q "$repo_name" && ! echo "$fn" | grep -q "$repo_name"; then
    echo "-- ATTENTION -- ( $repo_name ) named PUBLIC repository NOT FOUND!"
    echo "-- ATTENTION -- ( $repo_name ) named PRIVATE repository NOT FOUND!"
    repo_list
    echo "-- Aborting -- RUN AGAIN !"
    return 1
  fi

  # Prompt the user for confirmation
  modal() {
    echo "______________________________________________________"
    echo "_If you want _________________________________________"
    echo "______________________________       ATTENTION       _"
    echo "__to DELETE the Repository ? _                       _"
    echo "______________________________         $repo_name ?"
    echo "______________________________________________________"
    read -p "DELETE: ( Y/y ) | ABORT: ( N/n ) ? : " answer
    echo "______________________________________________________"
  }
  modal

repo_list=$(cat ~/.config/.github/.repo)

  # Process the user's answer
  case "$answer" in
    [Yy])
      # Delete the repository on GitHub
      curl -X DELETE -u "$GITHUB_USERNAME:$GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_USERNAME/$repo_name"
      echo "Repository successfully deleted from GitHub: github.com/$GITHUB_USERNAME/$repo_name"

      if ! [ "$repo_path" == '' ]; then

         # Prompt to delete the repository from the hard disk
      read -p "Delete the repository from the hard disk? ( Y/y to confirm): " delete_from_disk
      if [[ "$delete_from_disk" =~ [Yy] ]]; then
        if ! [ -d "$repo_path" ]; then
          echo "ERROR: Directory not found: $repo_path"
        else
          echo "DELETING: $repo_path"
          rm -rf $repo_path
          if ! [ -d "$repo_path" ]; then
            echo "Directory successfully deleted from HARDDISK: $repo_path"
          else
            echo "ERROR:Directory still on HARDDISK: $repo_path"
          fi
        fi
        echo "$repo_list" | grep -v "\/$repo_name\/" > ~/.config/.github/.repo
      else
        echo "Repository $repo_name was not deleted from the hard disk."
      fi
      
    fi
      ;;
    [Nn])
      echo "Repository deletion aborted."
      ;;
    *)
      echo "Invalid input. Repository deletion aborted."
      ;;
  esac
}

############################################################################
load_repos(){
    public_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=public" | jq -r '.[] | "\(.owner.login)/\(.name)"')
    private_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=private" | jq -r '.[] | "\(.owner.login)/\(.name)"')
}
############################################################################

# Define the function to delete a GitHub repository # ·e·
list_repo() { # ·c·
  # Check if the repository name is provided as an argument # ·e·
  load_repos
  echo "#######################################"
  echo "Check available Repositories: github.com/$GITHUB_USERNAME/"
  echo "#######################################"
  echo "              # PUBLIC #"
  echo "              ##########"
  echo "$public_repos"
  echo "#######################################"
  echo "              # PRIVATE #"
  echo "              ###########"
  echo "$private_repos"
  echo "#######################################"
  
}

############################################################################

# Define the function to initialize a new Git repository, # ·e· 
# create a branch, make the first commit, # ·e· 
# add remote, and push to the remote # ·e·
git_setup_and_push() {

  # Check if the repository name is provided as an argument
  if [ $# -ne 2 ] && [ $# -ne 1 ]; then
    echo "Usage: git_setup_and_push <repository_name> < private | '' >"
    return 1
  fi

  public_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=public" | jq -r '.[].name')
  private_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=private" | jq -r '.[].name')
  fn=$(echo $(echo "$public_repos"|grep -E "$1"))
  fn_private=$(echo $(echo "$private_repos"|grep -E "$1"))


  if [[ "$fn" == "$1" ]] || [[ "$fn_private" == "$1" ]]; then
    echo "-- ATTENTION -- $repo_name already available!"
    echo "-----------------------------------"
    echo "----- Available Repositories ------"
    repo_list
    echo "-----------------------------------"
    echo "-- Aborting -- RUN AGAIN !"
    return 1
  fi

  # Initialize parameter
  local repo_name="$1"
  local private="$2"
  local api_url="https://api.github.com/user/repos"
  
  # JSON-Payload for the repository creation request...
  if [ "$private" == "" ]; then
    local payload='{
    "name": "'"$repo_name"'",
    "private": false,
    "auto_init": true,
    "license": "MIT"
    }'
    echo "private: FALSE"

  elif [ "$private" == "private" ]; then
    local payload='{
    "name": "'"$repo_name"'",
    "private": true,
    "auto_init": true,
    "license": "MIT"
    }'
    echo "private: TRUE"

  fi
  # Create the new GitHub repository
    local response=$(curl -X POST \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -d "$payload" \
    "$api_url")



    public_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=public" | jq -r '.[].name')
    private_repos=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/user/repos?type=private" | jq -r '.[].name')

    fn=$(echo $(echo "$public_repos"|grep -E "$1"))
    fn_private=$(echo $(echo "$private_repos"|grep -E "$1"))
    pd=$(pwd)


  if [[ "$fn" == "$1" ]] || [[ "$fn_private" == "$1" ]]; then
    echo "$1 = $pd/$1/" >> ~/.config/.github/.repo
    echo "-- INFO -- Repository path: : :  $pd/$1  : : : added to REPO INSTALL LIST: ~/.config/.github/.repo"
  fi

  echo "GitHub Repository URL: https://github.com/$GITHUB_USERNAME/$1.git"
  echo git clone "git@github.com:$GITHUB_USERNAME/$1.git"
  git clone "git@github.com:$GITHUB_USERNAME/$1.git"
  cd "$1"
  rm README.md

  uc_string=${repo_name^^}
  current_year=$(date +%Y)

  # Write the content to the README.md file
  cat > README.md << EOF
#
# ${uc_string//[$'\n']/ & }
# 
---
EOF

  cat >> README.md << EOF
> __Content__:
  - For evolving workflow speed.
    - ...
    - ...
    - ...
---
## Features

> __Functions__
  - ...
  - ...
  - ...
---
EOF

  cat >> README.md << EOF
## Installation

> For the first __Installation:__

- ___Linux__ & __macOS___:
  - run in the __Terminal__:
  - ...
  - ...
  - ...
---
## Usage

> __type commands__
  - ...
  - ...
  - ...
---
## Licence

> M I T
---
## Contributors & Authors
> ${current_year} © ${GITHUB_USERNAME}
---
EOF

  # Add the README.md to the staging area
  git add README.md

  # Make the initial commit with the repository name as the commit message
  git commit -m "The Project begins"
  git push

  # Display the Git status at the end
  git status

}

############################################################################


############################################################################
# function for listing collaborators in a reposirotry
list_collaborator() {
    NAME=$1
# API-Endpunkt for the list of repositories of the user
repos=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/user/repos")
repo_names=$(echo $repos | jq -r '.[].full_name')

# loop throught the repositories
for repo in $repo_names; do
  # extracting repo owner and repo name
  repo_owner=$(echo $repo | cut -d '/' -f 1)
  repo_name=$(echo $repo | cut -d '/' -f 2)

  # ignoring own repositories
  if [ "$repo_name" == "$NAME" ]; then
    echo "Collaborators for $repo:"
    
    # API-Endpoint for the collaborators from a repository
    collaborators=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo_owner/$repo_name/collaborators")
    login_names=$(echo $collaborators | jq -r '.[].login')
    
    # output of the collaborators
    for name in $login_names; do
      echo "- $name"
    done
    
    echo ""
  fi
done
}
############################################################################

# function for listing all repositories with all collaborators
list_repo_with_collaborator() {

# API-Endpoint for current user 
user_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/user")
login=$(echo $user_info | jq -r '.login')

# API-Endpunkt for the list of repositories of the user
repos=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/user/repos")
repo_names=$(echo $repos | jq -r '.[].full_name')

# loop through the repositories
for repo in $repo_names; do
  # extracting repo owner and repo name
  repo_owner=$(echo $repo | cut -d '/' -f 1)
  repo_name=$(echo $repo | cut -d '/' -f 2)

  # ignoring own repositories
    echo "Collaborators for $repo:"
    
    # API-Endpoint for the collaborators from a repository
    collaborators=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo_owner/$repo_name/collaborators")

    # Check if the response is in JSON format and contains "login" field
    if echo $collaborators | jq -e '.[].login' >/dev/null 2>&1; then
      login_names=$(echo $collaborators | jq -r '.[].login')
      # output of the collaborators
      for name in $login_names; do
        echo "- $name"
      done
    else
      echo "- NO ACCESS - to repository."
    fi
    
    echo ""
done
}

############################################################################


############################################################################

# function for adding collaborators per username
add_collaborator_by_username() {
    REPO_NAME=$1
    COLLABORATOR_USERNAME=$2

    API_URL="https://api.github.com/repos/$GITHUB_USERNAME/$REPO_NAME/collaborators/$COLLABORATOR_USERNAME"
    
    curl -X PUT -H "Authorization: Bearer $GITHUB_TOKEN" \
         -H "Accept: application/vnd.github.v3+json" \
         "$API_URL"

    echo "The collaborator with the username $COLLABORATOR_USERNAME is successfully added to repository $REPO_NAME."
}

# function to adding collaborators per email
add_collaborator_by_email() {
    REPO_NAME=$1
    COLLABORATOR_EMAIL=$2

    API_URL="https://api.github.com/repos/$GITHUB_USERNAME/$REPO_NAME/collaborators/$COLLABORATOR_EMAIL"

    curl -X PUT -H "Authorization: Bearer $GITHUB_TOKEN" \
         -H "Accept: application/vnd.github.v3+json" \
         "$API_URL"

    echo "The collaborator with the email $COLLABORATOR_EMAIL is successfully added to repository $REPO_NAME."
}

# root function for adding collaborators depends on input
add_collaborator() {
    REPO_NAME=$1
    COLLABORATOR_INPUT=$2
    
    if [[ $INPUT == *'@'* ]]; then
        add_collaborator_by_email $REPO_NAME $COLLABORATOR_INPUT
    else
        add_collaborator_by_username $REPO_NAME $COLLABORATOR_INPUT
    fi
}

############################################################################

############################################################################
# function for removing collaborators from repository
delete_collaborator() {
    REPO_NAME=$1
    COLLABORATOR_USERNAME=$2
    list_collaborators "$REPO_NAME"
    
    API_URL="https://api.github.com/repos/$GITHUB_USERNAME/$REPO_NAME/collaborators/$COLLABORATOR_USERNAME"
    
    curl -X DELETE -H "Authorization: Bearer $API_TOKEN" \
         -H "Accept: application/vnd.github.v3+json" \
         "$API_URL"

    echo "The collaborator $COLLABORATOR_USERNAME was successfully removed from repository $REPO_NAME."
    list_collaborators "$REPO_NAME"

}


############################################################################

# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Function ------------------ ·f·  Function
# ·f· ______________________________________________ ·f· 