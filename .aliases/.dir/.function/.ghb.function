# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Function ------------------ ·f·  Function
# ·f· ______________________________________________ ·f· 

update_login(){ # ·c·
  echo ................................................... # ·c·
  echo Please create a GitHub API Token in your GitHub Account # ·c·
  echo AND give repo and delete_repo  # ·c·
  echo permissions to this token # ·c·
  echo in  -- https://github.com/settings/tokens -- # ·c·
  echo ................................................... # ·c·
  read -p "Please enter your GitHub USERNAME =  " username # ·c·
  read -p "Please enter your GitHub TOKEN =  " token  # ·c·
  echo ................................................... # ·c·
  if [ "$username" = "" ]; then # ·c·
    return 1 # ·c·
  fi # ·c·
  if [ "$token" = "" ]; then # ·c·
    return 1 # ·c·
  fi # ·c·
  if ! [ "$username" = "" ]; then # ·c·
    if ! [ "$token" = "" ]; then # ·c·
      if ! [ -d ~/.config/.github/ ]; then
        mkdir -p ~/.config/.github/
      fi
      echo "GITHUB_USERNAME='$username'">  ~/.config/.github/.login # ·c·
      echo "GITHUB_TOKEN='$token'" >  ~/.config/.github/.login # ·c·
      echo ................................................... # ·c·
      cat ~/.config/.github/.login # ·c·
      echo ................................................... # ·c·
    fi # ·c·
  fi # ·c·
} # ·c·
show_ssh(){ # ·c·
    if [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
      echo "{ RSA } SSH KEY" # ·c·
        cat ~/.ssh/id_rsa.pub # ·c·
      echo "{ RSA } SSH KEY" # ·c·
    fi # ·c·
    if [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
      echo "{ ED25519 } SSH KEY" # ·c·
        cat ~/.ssh/id_ed25519.pub # ·c·
      echo "{ ED25519 } SSH KEY" # ·c·
    fi # ·c·
} # ·c·

# Add SSH -RSA- -ED- KEY to your GitHub Account # ·e· 
add_ssh_github(){ # ·c·
  # Check if the repository name is provided as an argument # ·e·
if [ $# -ne 1 ]; then # ·c·
  return 1 # ·c·
fi # ·c·

if ! [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
  if ! [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
    read -p "-NO SSH KEY - FOUND. Which cert you want? type { rsa } for RSA SHH Key -or- { ed } for ED25519 SSH Key = " key  # ·c·
    if [ "$key" = "rsa" ]; then # ·c·
      ssh-keygen -t rsa -b 2048 # ·c·
    fi # ·c·
    if [ "$key" = "ed" ]; then # ·c·
      ssh-keygen -t ed25519 # ·c·
    fi # ·c·
  fi # ·c·
fi # ·c·

if [ -f ~/.ssh/id_rsa.pub ]; then # ·c·
  ssh_key=$(cat ~/.ssh/id_rsa.pub) # ·c·
elif [ -f ~/.ssh/id_ed25519.pub ]; then # ·c·
    ssh_key=$(cat ~/.ssh/id_ed25519.pub) # ·c·
fi # ·c·
# Emit SSH key to curl and call the API # ·e·
curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d '{"title":"'"$1"'", "key":"'"$ssh_key"'"}' "https://api.github.com/user/keys" # ·c·
} # ·c·


# Define the function to delete a GitHub repository # ·e·
repo_delete() { # ·c·
  # Check if the repository name is provided as an argument # ·e·
  if [ $# -ne 1 ]; then # ·c·
    return 1 # ·c·
  fi # ·c·

  local repo_name="$1" # ·c·
  sudo rm -r ~/projects/$1 # ·c·
  curl -X DELETE -u "$GITHUB_USERNAME:$GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_USERNAME/$repo_name" # ·c·
}

# Define the function # ·e·
# to initialize a new Git repository, # ·e· 
# create a branch, # ·e·
# make the first commit, # ·e· 
# add remote, and # ·e·
# push to the remote # ·e·


git_setup_and_push() {

  # Check if the repository name is provided as an argument
  if [ $# -ne 1 ]; then
    echo "Usage: git_setup_and_push <repository_name>"
    return 1
  fi
<
  local repo_name="$1"
  local api_url="https://api.github.com/user/repos"

  # JSON-Payload for the repository creation request
  local payload='{
    "name": "'"$repo_name"'",
    "private": true,
    "auto_init": true
  }'

  # Create the new GitHub repository
  local response=$(curl -X POST \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -d "$payload" \
    "$api_url")

  echo "GitHub Repository URL: https://github.com/$GITHUB_USERNAME/$1.git"
  echo "$1" >> ~/config
  git clone "git@github.com:$GITHUB_USERNAME/$1.git"
  cd "$1"
  rm README.md

  if ! [ -d ~/.config/.github/ ]; then
        mkdir -p ~/.config/.github/
  fi
  path=pwd
  echo "$1 = $path" >> ~/.config/.github/.repo


  uc_string=${repo_name^^}
  current_year=$(date +%Y)

  # Write the content to the README.md file
  cat > README.md << EOF
---
#
# ${uc_string//[$'\n']/ & }
# 
---
EOF

  cat >> README.md << EOF
> __Content__:
  - For evolving workflow speed.
    - ...
    - ...
    - ...
---
## Features

> __Functions__
  - ...
  - ...
  - ...
---
EOF

  cat >> README.md << EOF
## Installation

> For the first __Installation:__

- ___Linux__ & __macOS___:
  - run in the __Terminal__:
  - ...
  - ...
  - ...
---
## Usage

> __type commands__
  - ...
  - ...
  - ...
---
## Licence

> M I T
---
## Contributors & Authors
> Author: ${GITHUB_USERNAME} © ${current_year}
---
EOF

  # Add the README.md to the staging area
  git add README.md

  # Make the initial commit with the repository name as the commit message
  git commit -m "The Project begins"
  git push

  # Display the Git status at the end
  git status

}

# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Function ------------------ ·f·  Function
# ·f· ______________________________________________ ·f· 