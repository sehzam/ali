
# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Functions  ---------------- ·f· Directory Control System
# ·f· ______________________________________________ ·f· 
#
# ·e· ( START ) = { grep and highlight pattern in file }
    grp() { # ·c·
      grep -E "$1" "$2" # ·c·
    } # ·c·
#
# ·e· ·· START ·· = { make a backup of file given as parameter with timestamp }
bk() { # ·c·
  # ·e· = alias = .bk
    cp "$1" "$1_$(date '+%Y%m%d%H%M%S').bak" # ·c· 
} # ·c· 
#
# ·e· ·· START ·· = { create folder recursively and enter them }
cf() { # ·c·
  # ·e· = alias = .cf
    mkdir -p "$1" && cd "$1" # ·c·
} # ·c· 
#
# ·e· ·· START ·· = { searchs for string and replace the in file }
sr() { # ·c·
  # ·e· = alias = .sr
    sed -i "s/$1/$2/g" "$3" # ·c· 
} # ·c· 
#
function copy_create_folder() {
  local destination="${@: -1}"

  # Prüfen, ob der Zielordner bereits existiert
  if [ -d "$destination" ]; then
    # Absolute Pfade von Zielordnern auflösen
    local destination_abs=$(realpath "$destination")

    for ((i = 1; i < $#; i++)); do
      local source="${!i}"
      local source_abs=$(realpath "$source")

      # Überprüfen, ob der Quellordner ein Unterverzeichnis des Zielordners ist
      if [[ "$source_abs" == "$destination_abs"* ]]; then
        echo "Überspringe $source: Es ist ein Unterverzeichnis des Zielordners."
      else
        # Erstellen des vollständigen Ziel-Pfads basierend auf der Quellstruktur
        local relative_path="${source#$PWD/}"
        local destination_path="$destination/$relative_path"

        # Kopieren von Dateien oder Ordnern zum Ziel-Pfad
        mkdir -p "$(dirname "$destination_path")"
        cp -r "$source" "$destination_path"
      fi
    done
  else
    # Zielordner erstellen und Dateien/Ordner kopieren
    mkdir -p "$destination"
    shift $(( $# - 1 ))
    cp -r "$@" "$destination"
  fi
}

#
# ·f· ------------------ Functions  ---------------- ·f· Directory Control System