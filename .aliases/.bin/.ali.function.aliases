# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Functions ----------------- ·f· .ali Entry Point
# ·f· ______________________________________________ ·f· 
directory_to_search="$HOME/.aliases/.dir/" # ·v· 
directory_to_save="$HOME/.aliases/.list/" # ·v· 
output_file="$HOME/.aliases/.etc/.ali.list"
output_file_var="$HOME/.aliases/.etc/.ali.list.names"
search_pattern=".***.aliases" # ·v· 

if ! [ -f ~/.aliases/.etc/.ali.lists ]; then # ·c·  
        # ·e· ( INFO ) Find commmand searchs for files with pattern abd write it to file  
        find "$directory_to_search" -type f -name "$search_pattern" -exec basename {} \; > "$output_file" # ·c·
        find "$directory_to_search" -type f -name "$search_pattern" -exec basename {} \; | awk -F. '{print $2}' > "$output_file_var" # ·c·
fi # ·c· 
# ·e· ( INFO ) Source reading the aliases to make it available at current session 
# ·e· ( INFO ) Check, output file exists and is not empty 
if [ -s "$output_file" ]; then # ·c·
    while read -r alias_file; do # ·c·
    # ·e· ( INFO ) If the output file exists, than source it 
        # ·e· ( INFO ) Check, if file exists as regular file  
        if [ -f "$directory_to_search$alias_file" ]; then # ·c· 
            # ·e· ( INFO ) sourcing the file, for loading it to current shell session
            # ·e· ( INFO ) in .bashrc its loads at every new shell session
            echo $directory_to_search$alias_file
            . "$directory_to_search$alias_file" # ·c·
        fi # ·c· 
    done < "$output_file" # ·c·v· 
fi # ·c·
# ·e· ( START ) = { grep and highlight pattern in file }
    grp() { # ·c·
      grep -E "$1" "$2" # ·c·
    } # ·c·
# ·e· ( START ) = { List of alias files containing alias definitions for the shell }




# Prüfen, ob die Ausgabedatei nicht leer ist
if [ -s "$output_file_var" ]; then
    while read -r alias_file; do
        # Ausgabe der Variablen für Debugging
        echo "$directory_to_save.$alias_file.aliases"

        # Überprüfen, ob die Datei existiert und eine reguläre Datei ist
        if [ -f "$directory_to_search.$alias_file.aliases" ]; then


echo "
#
# ·o· ______________________________________________ ·o· 
# ·o· --------           $alias_file            ------------ ·o· $alias_file
# ·o· ______________________________________________ ·o· 
#
# ·o· ______________________________________________ ·o· 
# ·o· --------------   R A W Output ---------------- ·o· R A W Output
# ·o· ______________________________________________ ·o· 
#
# ( .$alias_file ): raw output · ~/.aliases/.dir/.$alias_file.aliases  # ·e·
alias ".$alias_file"='c && cat ~/.aliases/.dir/.$alias_file.aliases' # ·a·
#
# ·o· ---------------------------------------------- ·o· 
#
# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Functions ----------------- ·f· {ali} Functions
# ·f· ______________________________________________ ·f· 
#
${alias_file}_a() { # ·c·
  .$alias_file | grep -E '·o|·a' | grep -v '# ·e' | grep -v '# ·c' | grep -E '# ·o|# ·a|\(|\)|echo|__| [^,]*=|·o·|# ·o·|·' # ·c·
} # ·c·
#
${alias_file}_e() { # ·c·
  .$alias_file | grep -E '·o|·e' | grep -v '# ·a' | grep -v '# ·c' | grep -E '# ·o|# ·e|\(|\)|echo|__|·o·|# ·o·|# ' # ·c·
} # ·c·
#
${alias_file}_f() { # ·c· 
  .$alias_file | grep -E '·f|·c|·v|·i|·e|·o' | grep -v 'alias' | grep -E '·f·|#|·v·|·i·|\(|\)|echo|__|·c·' # ·c·
} # ·c·
#
# ·f· ---------------------------------------------- ·f· 
#
# ·o· ______________________________________________ ·o· 
# ·o· ------------------- Aliases ------------------ ·o· Development
# ·o· ______________________________________________ ·o· 
#
# ( .$alias_file.a ): lists ~/.aliases/.dir/.$alias_file.aliases · ( only aliases ) # ·e·
alias '.$alias_file.a'='c && ${alias_file}_a' # ·a·
#
# ( .$alias_file.e ): lists ~/.aliases/.dir/.$alias_file.aliases · ( alias + explaination ) # ·e· 
alias '.$alias_file.e'='c && ${alias_file}_e' # ·a·
alias '.$alias_file.e'='c && ${alias_file}_e' # ·a·
#
# ( .$alias_file.f ): lists ~/.aliases/.dir/.$alias_file.aliases · ( functions ) # ·e·
alias '.$alias_file.f'='c && ${alias_file}_f' # ·a·
#
# ·o· ---------------------------------------------- ·o· 
#
# ·o· ______________________________________________ ·o· 
# ·o· --------           $alias_file            ------------ ·o· $alias_file
# ·o· ______________________________________________ ·o· 
#
" > "$directory_to_save.$alias_file.aliases"
source $directory_to_save.$alias_file.aliases
        fi
    done < "$output_file_var"
fi
# ·f· ------------------ Functions ----------------- ·f· .ali Entry Point
# ·f· ______________________________________________ ·f· 
# ·f· ------------------ Functions ----------------- ·f· Directory Control System
# ·f· ______________________________________________ ·f· 

# ·e· ·· START ·· = { make a backup of file given as parameter with timestamp }
bk() { # ·c·
  # ·e· = alias = .bk
  cp "$1" "$1_$(date '+%Y%m%d%H%M%S').bak" # ·c· 
} # ·c· 

# ·e· ·· START ·· = { create folder recursively and enter them }
cf() { # ·c·
  # ·e· = alias = .cf
  mkdir -p "$1" && cd "$1" # ·c·
} # ·c· 

# ·e· ·· START ·· = { searchs for string and replace the in file }
sr() { # ·c·
  # ·e· = alias = .sr
  sed -i "s/$1/$2/g" "$3" # ·c· 
} # ·c· 

function copy_create_folder() { # ·c· 
  # ·e· # Get the last argument as the destination
  local destination="${@: -1}" # ·c·  
  mkdir -p "$destination" # ·c· 
  # ·e· # Shift all arguments except the last one (destination)
  shift $(( $# - 1 )) # ·c·  
  cp -r "$@" "$destination" # ·c· 
} # ·c· 

# ·f· ------------------ Functions ----------------- ·f· Directory Control System
